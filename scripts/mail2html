#!/usr/bin/env python

import sys
import email
from subprocess import Popen, PIPE, STDOUT


def compose(headers, text, html):
    out = email.message.EmailMessage()
    out.set_content(text, cte = 'quoted-printable',
                    params = {"markup": "markdown",
                              "format": "flowed"})
    out.add_alternative(html, maintype = 'text',
                        subtype = 'html', cte = 'quoted-printable')
    for h in headers:
        out.add_header(_name = h[0], _value = h[1])
    return(out)


def parse(raw_msg):
    msg = email.message_from_string(raw_msg)
    msg_body = msg.get_payload()
    msg_headers = parse_headers(raw_msg)
    return(msg_body, msg_headers)


def parse_headers(raw_msg):
    parser = email.parser.HeaderParser()
    headers = parser.parsestr(raw_msg).items()
    check_headers(headers)
    return(headers)


def md2html(md):
    p = Popen(['pandoc', '-f', 'markdown',
               '-t', 'html', '--standalone', '--self-contained'],
              stdout=PIPE, stdin=PIPE, stderr=STDOUT)
    return(p.communicate(input = bytes(md, encoding = "utf-8"))[0])


def check_headers(headers):
    required = ['From', 'To', 'Subject']
    actual = [h[0] for h in headers]
    all_there = all([r in actual for r in required])
    assert all_there, "\nrequired headers: " + ', '.join(required) + \
                      "\nfound headers:    " + ', '.join(actual)


if __name__ == '__main__':
    raw_msg = sys.stdin.read()
    plaintext, headers = parse(raw_msg)
    html = md2html(plaintext)
    output = compose(headers, plaintext, html)
    sys.stdout.write(output.as_string())

# done.

